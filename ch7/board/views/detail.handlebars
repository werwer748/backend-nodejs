<h1>{{title}}</h1>

{{#with post}}
  <!-- 키값 생략을 위해 with로 감싸기 -->
  <!-- 1. 게시글 제목 -->
  <h2 class="text-xl">{{title}}</h2>

  <div>
    <!-- 2. 작성자 이름 -->
    작성자 :<b>{{writer}}</b>
  </div>
  <div>
    <!-- 3. 조회수와 작성일시 -->
    조회수 :
    {{hits}}
    | 작성일시 :
    {{dateString createdDt}}
    <!-- 4. 게시글 관련 버튼 영역 -->
    <button onclick="modifiyPost()">수정</button>
    <button onclick="deletePost()">삭제</button>
  </div>

  <div>
    <!-- 5. 본문 표시 영역 -->
    <pre>{{content}}</pre>
  </div>

  <section>
    <div>
      <!-- 댓글 개수 표시 -->
      <h3>{{lengthOfList comments}}개의 댓글이 있습니다.</h3>
    </div>

    <form method="post" action="/write-comment">
      <input type="hidden" name="id" value="{{_id}}" />
      <!-- 7. 댓글 작성 폼 -->
      <div>
        <div>
          <input type="text" name="name" placeholder="이름" autocomplete="new-password"/>
          <input type="password" name="password" placeholder="비밀번호" autocomplete="new-password" />
        </div>
        <div>
          <textarea
            name="comment"
            placeholder="댓글을 입력해주세요."
            cols="40"
            rows="3"
          ></textarea>

          <br />
          <br />
          <!-- 8. 댓글 전송 버튼 -->
          <button>댓글 쓰기</button>
        </div>
      </div>
    </form>
  </section>

  <!-- 9. 댓글 표시 영역 -->
  <section>
    {{#each comments}}
    <div>
      <div>
        작성자 :
        <b>{{name}}</b>
      </div>
      <div>
        작성일시 : {{dateString createdDt}}
        <button onclick="deleteComment('{{idx}}')">삭제</button>
      </div>
    </div>
    <div>
      <pre>{{comment}}</pre>
    </div>
    {{/each}}
  </section>
{{/with}}

<footer>
  <div>
    <!-- 10. 목록으로 가는 링크 -->
    <a href="/">목록으로</a>
  </div>
</footer>

<script>
const postOption = {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
};

async function modifiyPost() {
  const password = prompt("비밀번호를 입력해주세요."); // 프롬프트에서 취소를 누른 경우 처리

  if (!password) {
    return;
  } // check-password API 실행
  const result = await fetch("/check-password", {
    ...postOption,
    body: JSON.stringify({
      id: "{{post._id}}",
      password,
    }),
  }); // json함수를 실행하는 경우도 await를 해줘야 함

  const data = await result.json(); // 패스워드가 일치할 경우 수정 페이지로 이동

  if (data.isExist) {
    document.location = "/modify/{{post._id}}";
  } else {
    alert("패스워드가 올바르지 않습니다.");
  }
}

const deleteOption = {
  method: "DELETE",
  headers: {
    "Content-Type": "application/json",
  },
};

async function deletePost() {
  const password = prompt("삭제하려면 패스워드를 입력해주세요.");

  if (!password) {
    return;
  }

  // delete API 호출
  const result = await fetch('/delete', {
    ...deleteOption,
    body: JSON.stringify({ id: "{{post._id}}", password }),
  });

  // 결과에 따른 메시지 출력
  const data = await result.json();
  if (!data.isSuccess) {
    alert('삭제에 실패했습니다. 패스워드를 확인해주세요.');
    return;
  }

  document.location = '/';
}

async function deleteComment(idx) {
  const password = prompt("삭제하려면 패스워드를 입력해주세요.");
  
  if (!password) {
    return;
  }

  // 1. /delete-comment APi 실행
  const result = await fetch("/delete-comment", {
    ...deleteOption,
    body: JSON.stringify({
      id: "{{post._id}}",
      idx,
      password,
    }),
  });

  // 2. 댓글 삭제 실패 시 메시지 띄우고 함수 실행 종료
  const data = await result.json();
  if (!data.isSuccess) {
    alert('삭제에 실패했습니다. 패스워드를 확인해주세요.');
    return;
  }

  // 3. 성공 시 메시지를 띄우고 화면 리프레시
  alert('삭제 성공!');
  document.location.reload();
}
</script>